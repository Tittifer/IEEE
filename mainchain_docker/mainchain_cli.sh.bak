#!/bin/bash
# Mainchain CLI交互脚本
# 由deploy.sh自动生成 - Mon Sep 29 17:23:37 CST 2025 - Mon Sep 29 16:56:21 CST 2025 - Mon Sep 29 16:55:03 CST 2025 - Mon Sep 29 16:14:17 CST 2025 - Mon Sep 29 15:40:10 CST 2025 - Mon Sep 29 15:36:53 CST 2025 - Mon Sep 29 15:24:07 CST 2025 - Mon Sep 29 14:55:55 CST 2025 - $(date)

# 获取脚本所在目录
SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)

# 加载环境变量
if [ -f "${SCRIPT_DIR}/env.sh" ]; then
  source ${SCRIPT_DIR}/env.sh
else
  echo "错误: 找不到环境变量配置文件 ${SCRIPT_DIR}/env.sh"
  exit 1
fi

# 颜色定义
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# 使用说明
function print_usage() {
  echo "使用方法: ./mainchain_cli.sh <命令> [参数...]"
  echo ""
  echo "命令:"
  echo "  query <函数名> [参数...]  - 查询链码"
  echo "  invoke <函数名> [参数...] - 调用链码"
  echo "  help                     - 显示此帮助信息"
  echo ""
  echo "示例:"
  echo "  ./mainchain_cli.sh query GetUser did:example:123"
  echo "  ./mainchain_cli.sh invoke RegisterUser did:example:456 李四 110101199001011234 测试公钥"
}

# 查询链码
function query_chaincode() {
  if [ -z "$1" ]; then
    echo "错误: 未指定函数名"
    print_usage
    exit 1
  fi
  
  FUNC_NAME=$1
  shift
  
  # 构建参数数组
  ARGS="["
  for arg in "$@"; do
    ARGS="${ARGS}\\""$arg"\\","
  done
  
  # 移除最后一个逗号并添加结束括号
  if [ "$ARGS" != "[" ]; then
    ARGS=${ARGS%,}
  fi
  ARGS="${ARGS}]"
  
  echo -e "${GREEN}查询链码: ${FUNC_NAME}${NC}"
  docker exec cli_mainchain peer chaincode query -C ${CHANNEL_NAME} -n ${CHAINCODE_NAME} -c "{\"function\":\"${FUNC_NAME}\",\"Args\":${ARGS}}"
}

# 调用链码
function invoke_chaincode() {
  if [ -z "$1" ]; then
    echo "错误: 未指定函数名"
    print_usage
    exit 1
  fi
  
  FUNC_NAME=$1
  shift
  
  # 构建参数数组
  ARGS="["
  for arg in "$@"; do
    ARGS="${ARGS}\\""$arg"\\","
  done
  
  # 移除最后一个逗号并添加结束括号
  if [ "$ARGS" != "[" ]; then
    ARGS=${ARGS%,}
  fi
  ARGS="${ARGS}]"
  
  echo -e "${GREEN}调用链码: ${FUNC_NAME}${NC}"
  docker exec cli_mainchain peer chaincode invoke -o orderer.mainchain.com:8050 \
    --tls \
    --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/mainchain.com/orderers/orderer.mainchain.com/msp/tlscacerts/tlsca.mainchain.com-cert.pem \
    -C ${CHANNEL_NAME} \
    -n ${CHAINCODE_NAME} \
    --peerAddresses peer0.org1.mainchain.com:8051 \
    --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.mainchain.com/peers/peer0.org1.mainchain.com/tls/ca.crt \
    -c "{\"function\":\"${FUNC_NAME}\",\"Args\":${ARGS}}" \
    --waitForEvent
}

# 主函数
if [ "$1" == "query" ]; then
  shift
  query_chaincode "$@"
elif [ "$1" == "invoke" ]; then
  shift
  invoke_chaincode "$@"
elif [ "$1" == "help" ] || [ -z "$1" ]; then
  print_usage
else
  echo "错误: 未知命令 $1"
  print_usage
  exit 1
fi
